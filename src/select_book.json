<?php
    header('Content-Type: application/json; charset=utf-8');
    header('Access-Control-Allow-Origin: *');


    // クラスを実行する
    select_book::execute();
    
    class select_book {
        /**
         * メイン実行メソッド
         */
        public static function execute(){
            // 設定ファイルを読み取ります
            $config = parse_ini_file("system.properties",true);

            // 処理引数の処理
            $isbn = $_GET["isbn"];
            $keyword = $_GET["keyword"];
            // TODO 入力チェック
/**
            if(!$isbn){
                select_book::printError("引数 : ISBNは必須です");                
            }
 
 */
            try{
                // データベースの接続処理
                $mysqli = new mysqli($config['database']['server'], $config['database']['user'], $config['database']['password'],$config['database']['database']);
                $mysqli->set_charset("utf8");

                if (mysqli_connect_errno()) {
                    $message = '接続失敗です。'.mysqli_connect_error();
                    select_book::printError($message);
                }
            }catch(Exception $e){
                select_book::printError($e);
                return;
            }
            $query = 'select * from RELEASE_INFORMATION ';
            if($isbn){
                $where_query = $where_query . " barcode = '" . $isbn . "'";
            }
            if($keyword){
                    $where_query = " title like '%" . $keyword . "%'";
                    $where_query = $where_query . " or author like '%" . $keyword . "%'";
                    $where_query = $where_query . " or magazine like '%" . $keyword . "%'";
                    $where_query = $where_query . " or m_code like '%" . $keyword . "%'";
                    $where_query = $where_query . " or publisher like '%" . $keyword . "%'";
                    $where_query = $where_query . " or release_date like '%" . $keyword . "%'";
                    $where_query = $where_query . " or barcode like '%" . $keyword . "%'";
            }
            if($where_query){
                $query = $query . " where " . $where_query;
            }

            if ($result = $mysqli->query($query)) {
		while($row = $result->fetch_assoc()){
                    $rows[] = $row;
                }
                $result->close();
            }
            $mysqli->close();
            if(!$rows){
                select_book::printError("結果がありません");                
            }


            // 要素をソートします
            // 著者名 -> 本コード
            usort($rows, "select_book::sort_book");

            echo json_encode(
                array(
                    "IsValid" => "TRUE",
                    "RESULT" => $rows
                ),JSON_UNESCAPED_UNICODE
            );
        }
        /**
         * 本情報をソートします
         * 著者名 -> 本コード
         * @param type $a
         * @param type $b
         * @return type
         */
        function sort_book($a, $b) {
            // 著者が同じであるかの判断
            $result = strcasecmp($a["author"],$b["author"]);
            if($result != 0){
                // 違う場合は著者名ソート
                return $result;
            }
            // 書籍コードでのソート
            $result =  select_book::comp_mcode($a["m_code"],$b["m_code"]);
            if($result != 0){
                return $result;            
            }
            // 出版者でソート
            $result = strcasecmp($a["publisher"],$b["publisher"]);
            if($result != 0){
                return $result;            
            }
            // 出版者でソート
            $result = strcasecmp($a["magazine"],$b["magazine"]);
            if($result != 0){
                return $result;            
            }
            // タイトルでのソート
            $result = strcasecmp($a["title"],$b["title"]);
            if($result != 0){
                return $result;            
            }

            return strcasecmp($a["release_date"],$b["release_date"]);
        }
        /**
         * 書籍コードの比較クラス
         * ほ-10-1 vs ほ-10-19
         * @param type $a
         * @param type $b
         * @return int
         */
        function comp_mcode($a,$b){
            // 書籍コードの分割パターン
            $patern = '/[-\s]/';
            // 書籍コードの分割配列
            $array_mcode_a = preg_split( $patern,$a);
            $array_mcode_b = preg_split( $patern,$b);

            // 桁数の短い方を回す
            $loop_end_count = count($array_mcode_a);
            if($loop_end_count > count($array_mcode_b)){
                $loop_end_count = count($array_mcode_b);
            }
            
            for($i = 0 ; $i < $loop_end_count ; $i ++ ){
                
                // 同じ値であるか
                if($array_mcode_a[$i] == $array_mcode_b[$i]){
                    continue;
                }
                // 文字列 > 数値
                if(!ctype_digit($array_mcode_a[$i]) && ctype_digit($array_mcode_b[$i])){
                    return -1;
                }                    
                if(ctype_digit($array_mcode_a[$i]) && !ctype_digit($array_mcode_b[$i])){
                    return 1;
                }                    
                if(ctype_digit($array_mcode_a[$i]) && ctype_digit($array_mcode_b[$i])){
                    // 数値比較
                    return $array_mcode_a[$i] - $array_mcode_b[$i];
                }
                // 文字列判断
                return strcasecmp($array_mcode_a[$i],$array_mcode_b[$i]);
            }

            // 桁数が異なる場合
            // 短い方が強い！
            return count($array_mcode_a)- count($array_mcode_b);

        }
        /**
         * エラーを出力します
         * @param type $message エラーメッセージ
         */
        protected static function printError($message){
            die( json_encode(
                array(
                    "IsValid" => "FALSE",
                    "ERROR" => $message
                ),JSON_UNESCAPED_UNICODE
            ));
        }      
    }
?>
